service: serverless-tut-node
frameworkVersion: '3'

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    TOKEN_SECRET: s3cr3t
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    - ${file(iam/SendMailIAM.yml):SendMailIAM}

resources:
  Resources:
    AuctionsTableDEVTEST: ${file(resources/AuctionsTableDEVTEST.yml):AuctionsTableDEVTEST}
    MailQueue: ${file(resources/MailQueue.yml):MailQueue}

functions:
  login:
    handler: src/handlers/login.handler
    events:
      - http:
          method: POST
          path: /login
  verifyToken:
    handler: src/handlers/verifyToken.handler
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /createAuction
          authorizer: verifyToken
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 hour)
  sendMail:
    handler: src/handlers/sendMail.handler
    events:
      - sqs:
          batchSize: 1
          arn: ${self:custom.MailQueue.arn}
    environment:
      SOURCE_EMAIL: ${env:SOURCE_EMAIL}

custom:
  AuctionsTable:
    name: !Ref AuctionsTableDEVTEST
    arn: !GetAtt AuctionsTableDEVTEST.Arn
  MailQueue:
    name: MailQueue-${self:provider.stage}
    arn: !GetAtt MailQueue.Arn
